《函数式语言程序设计》大作业
计科30 潘薪宇 郑弘宇
软件31 罗剑桥
一、得分项实现情况
1.功能项目：独立主程序、REPL、解释器、文法解析、Pretty-printer、错误处理、代码测试、代码风格
2.语言特性：逻辑表达式、浮点算数表达式、字符串与列表、While语言、数组、 一阶函数、文法作用域、高阶函数

二、功能项目部分实现简述
1.独立主程序：
Main.hs为独立主程序，通过ghc编译生成解释器。
2.REPL：
3.文法解析：前端文法解析基于Parsec库实现。我们提供的parser对各个token之间的空白字符不敏感，同时支持C语言风格的单行与多行注释。因为Parsec是一个比较成熟并被广泛使用的框架，这里就只简单提实现时需要注意的两点：一是在匹配时可能需要backtrack的位置要使用try避免消耗输入；另外在匹配时需要保证消耗完所有输入，避免程序段中间出现错误时直接截断而不输出正确的报错信息。我们我们的AST定义如下所示。
data ProgDecl = Program Stmt
data Stmt = StmtList [Stmt]
          | Assign String Expr
          | Skip          
          | If Expr Stmt Stmt 
          | While Expr Stmt
          | ArrayDef String Expr
          | ArrayAssign String Expr Expr
          | Return Expr
data Expr = BoolLit Bool 
          | IntLit Integer
          | DoubleLit Double
          | CharLit Char
          | NilList
          | Var String
          | ArrayEntry String Expr
          | ABinary ABinOp Expr Expr
          | Not Expr
          | BBinary BBinOp Expr Expr
          | RBinary RBinOp Expr Expr
          | Pair Expr Expr
          | PairFst Expr
          | PairSnd Expr
          | Call Expr [Expr]
          | Function [String] Stmt
          | Let String Expr Expr
data BBinOp = And | Or deriving
data RBinOp = EQ | GE | LE | GT | LT
data ABinOp = Add | Subtract | Multiply | Divide

3.解释器：
使用命令ghc main.hs -o ki编译得到解释器ki.exe，支持（指定输入输出文件）解释执行的功能。具体实现时是将输入文件封装成一个字符串传给解释器执行。
4.Pretty-printer：
在Spec.hs中实现了Pretty-printer。将抽象数据类型Stmt和ProgDecl声明为Show类型类的实例，定义了不同类型语句的显示方式，并根据程序结构层次加入相应数目的空格缩进。
5.错误处理：
我们给出的错误信息包括两个方面：静态分析时借助Parsec库给出的文法错误，以及解释运行时给出的运行时错误。运行时错误包括以下几个方面：类型不匹配错误，如If和While语句的条件变量必须是Bool类型，四则运算的运算数必须
6.代码测试：
在Test.hs中进行了一系列的用例测试。我们对于不同类型的表达式、不同类型的语句、一阶函数及高阶函数等功能都进行了测试。
除了测试正常程序的执行结果是否正确，还对如类型不匹配、数组越界、未知变量等异常情况进行了测试。程序能够返回预期的错误信息。
7.代码风格：

四、语言特性部分实现简述
1.逻辑表达式：
2.浮点算数表达式：
3.字符串和列表：
4.While语言：
5.数组：
6.一阶函数：
7.文法作用域：
8.高阶函数：